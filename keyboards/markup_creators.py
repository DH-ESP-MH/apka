from telebot import types
from config import ADMIN_IDS

def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('üìö –ö–∞—Ç–∞–ª–æ–≥'),
        types.KeyboardButton('‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'),
        types.KeyboardButton('‚ùì –î–æ–ø–æ–º–æ–≥–∞'),
        types.KeyboardButton('üõí –ö–æ—à–∏–∫')
    ]
    markup.add(*buttons)
    return markup

def create_admin_main_keyboard(user_id):
    markup = create_main_keyboard()
    if user_id in ADMIN_IDS:
        markup.add(types.KeyboardButton('üëë –ê–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—å'))
    return markup

def create_categories_keyboard():
    categories = [
        ("‚úèÔ∏è –ü–∏—Å—å–º–æ–≤–µ –ø—Ä–∏–ª–∞–¥–¥—è", "cat_writing"),
        ("üìÑ –ü–∞–ø–µ—Ä–æ–≤—ñ –≤–∏—Ä–æ–±–∏", "cat_paper"), 
        ("üìé –û—Ñ—ñ—Å–Ω–µ –ø—Ä–∏–ª–∞–¥–¥—è", "cat_office"),
        ("üìè –®–∫—ñ–ª—å–Ω–µ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å—å–∫–µ –ø—Ä–∏–ª–∞–¥–¥—è", "cat_school"),
        ("üîç –í—Å—ñ —Ç–æ–≤–∞—Ä–∏", "cat_all")
    ]
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    for i in range(0, len(categories)-1, 2):
        markup.row(
            types.InlineKeyboardButton(categories[i][0], callback_data=categories[i][1]),
            types.InlineKeyboardButton(categories[i+1][0], callback_data=categories[i+1][1])
        )
    markup.add(types.InlineKeyboardButton(categories[-1][0], callback_data=categories[-1][1]))
    return markup

def create_product_details_keyboard(product_id, category):
    category_map = {
        '–ü–∏—Å—å–º–æ–≤–µ –ø—Ä–∏–ª–∞–¥–¥—è': 'writing',
        '–ü–∞–ø–µ—Ä–æ–≤—ñ –≤–∏—Ä–æ–±–∏': 'paper',
        '–û—Ñ—ñ—Å–Ω–µ –ø—Ä–∏–ª–∞–¥–¥—è': 'office',
        '–®–∫—ñ–ª—å–Ω–µ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å—å–∫–µ –ø—Ä–∏–ª–∞–¥–¥—è': 'school'
    }
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üõí –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫", callback_data=f"add_to_cart_{product_id}"),
        types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"back_to_{category_map.get(category, 'all')}")
    )
    return markup

def create_cart_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout"),
        types.InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart")
    )
    markup.add(types.InlineKeyboardButton("üõçÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="back_to_categories"))
    return markup

def create_order_confirmation_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_order"),
        types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")
    )
    return markup

def create_admin_keyboard():
    buttons = [
        ("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", "admin_add_product"),
        ("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä", "admin_remove_product"),
        ("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "admin_view_orders"),
        ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats")
    ]
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    for i in range(0, len(buttons), 2):
        if i+1 < len(buttons):
            markup.row(
                types.InlineKeyboardButton(buttons[i][0], callback_data=buttons[i][1]),
                types.InlineKeyboardButton(buttons[i+1][0], callback_data=buttons[i+1][1])
            )
        else:
            markup.add(types.InlineKeyboardButton(buttons[i][0], callback_data=buttons[i][1]))
    return markup

def create_product_categories_admin_keyboard():
    categories = ["–ü–∏—Å—å–º–æ–≤–µ –ø—Ä–∏–ª–∞–¥–¥—è", "–ü–∞–ø–µ—Ä–æ–≤—ñ –≤–∏—Ä–æ–±–∏", "–û—Ñ—ñ—Å–Ω–µ –ø—Ä–∏–ª–∞–¥–¥—è", "–®–∫—ñ–ª—å–Ω–µ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å—å–∫–µ –ø—Ä–∏–ª–∞–¥–¥—è"]
    markup = types.InlineKeyboardMarkup()
    for category in categories:
        markup.add(types.InlineKeyboardButton(category, callback_data=f"admin_category_{categories.index(category)}"))
    markup.add(types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_cancel_operation"))
    return markup

def create_admin_confirm_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="admin_confirm_add_product"),
        types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_cancel_operation")
    )
    return markup

def create_payment_methods_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí≥ –ö—Ä–µ–¥–∏—Ç–Ω–∞/–î–µ–±–µ—Ç–æ–≤–∞ –∫–∞—Ä—Ç–∫–∞", callback_data="pay_card"))
    markup.add(types.InlineKeyboardButton("üíµ –ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂", callback_data="pay_cash"))
    return markup

def create_payment_simulation_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –°–∏–º—É–ª—é–≤–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–∏–π –ø–ª–∞—Ç—ñ–∂", callback_data="payment_success"))
    markup.add(types.InlineKeyboardButton("‚ùå –°–∏–º—É–ª—é–≤–∞—Ç–∏ –Ω–µ–≤–¥–∞–ª–∏–π –ø–ª–∞—Ç—ñ–∂", callback_data="payment_fail"))
    return markup

def create_payment_retry_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂", callback_data="payment"))
    markup.add(types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="cancel_order"))
    return markup