from telebot import types
from bot_init import bot, user_states
from config import ADMIN_IDS, logger
from database import get_products, get_product_by_id, add_product, remove_product, get_orders
from keyboards import (
    create_admin_keyboard,
    create_product_categories_admin_keyboard,
    create_admin_confirm_keyboard
)

@bot.message_handler(commands=['admin'])
def handle_admin(message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
        
    admin_text = (
        "üëë *–ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–°–¨–ö–ê –ü–ê–ù–ï–õ–¨*\n\n"
        "‚ñ´Ô∏è /additem - –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä\n"
        "‚ñ´Ô∏è /removeitem - –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä\n"
        "‚ñ´Ô∏è /orders - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        "‚ñ´Ô∏è /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω—É"
    )
    
    bot.send_message(message.chat.id, admin_text, parse_mode='Markdown', 
                   reply_markup=create_admin_keyboard())

@bot.message_handler(commands=['additem'])
def handle_add_item_command(message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    if user_id not in user_states:
        user_states[user_id] = {}
    user_states[user_id] = 'admin_adding_product_name'
    bot.send_message(message.chat.id, "üè∑Ô∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")

@bot.message_handler(func=lambda message: message.from_user.id in user_states and user_states[message.from_user.id] == 'admin_adding_product_name')
def handle_add_product_name(message):
    user_id = message.from_user.id
    name = message.text
    if 'admin_product_info' not in user_states:
        user_states['admin_product_info'] = {}
    user_states['admin_product_info'][user_id] = {'name': name}
    user_states[user_id] = 'admin_adding_product_category'
    bot.send_message(message.chat.id, "üìÇ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:", reply_markup=create_product_categories_admin_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_category_'))
def handle_add_product_category(call):
    user_id = call.from_user.id
    category_idx = int(call.data.split('_')[2])  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    categories = ["–ü–∏—Å—å–º–æ–≤–µ –ø—Ä–∏–ª–∞–¥–¥—è", "–ü–∞–ø–µ—Ä–æ–≤—ñ –≤–∏—Ä–æ–±–∏", "–û—Ñ—ñ—Å–Ω–µ –ø—Ä–∏–ª–∞–¥–¥—è", "–®–∫—ñ–ª—å–Ω–µ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å—å–∫–µ –ø—Ä–∏–ª–∞–¥–¥—è"]
    
    if category_idx < 0 or category_idx >= len(categories):
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è.")
        bot.answer_callback_query(call.id)
        return
    
    category = categories[category_idx]
    user_states['admin_product_info'][user_id]['category'] = category
    user_states[user_id] = 'admin_adding_product_description'
    bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: message.from_user.id in user_states and user_states[message.from_user.id] == 'admin_adding_product_description')
def handle_add_product_description(message):
    user_id = message.from_user.id
    user_states['admin_product_info'][user_id]['description'] = message.text
    user_states[user_id] = 'admin_adding_product_price'
    bot.send_message(message.chat.id, "üí∞ –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10.99):")

@bot.message_handler(func=lambda message: message.from_user.id in user_states and user_states[message.from_user.id] == 'admin_adding_product_price')
def handle_add_product_price(message):
    user_id = message.from_user.id
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError("–¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–æ—é")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ü—ñ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    user_states['admin_product_info'][user_id]['price'] = price
    product = user_states['admin_product_info'][user_id]
    text = (
        f"üìã *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä:*\n\n"
        f"*–ù–∞–∑–≤–∞:* {product['name']}\n"
        f"*–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:* {product['category']}\n"
        f"*–û–ø–∏—Å:* {product['description']}\n"
        f"*–¶—ñ–Ω–∞:* ${product['price']:.2f}\n\n"
        f"–î–æ–¥–∞—Ç–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É?"
    )
    bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=create_admin_confirm_keyboard())
    user_states[user_id] = 'admin_confirming_product'

@bot.callback_query_handler(func=lambda call: call.data == "admin_add_product")
def handle_admin_add_product(call):
    try:
        user_id = call.from_user.id
        if user_id not in ADMIN_IDS:
            bot.send_message(call.message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            bot.answer_callback_query(call.id)
            return
        if user_id not in user_states:
            user_states[user_id] = {}
        user_states[user_id] = 'admin_adding_product_name'
        bot.send_message(call.message.chat.id, "üè∑Ô∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É (–∞–±–æ /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏):")
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_admin_add_product: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "admin_remove_product")
def handle_admin_remove_product(call):
    user_id = call.from_user.id
    if user_id not in ADMIN_IDS:
        bot.send_message(call.message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        bot.answer_callback_query(call.id)
        return
    products = get_products()
    if not products:
        bot.send_message(call.message.chat.id, "–ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        bot.answer_callback_query(call.id)
        return
    markup = types.InlineKeyboardMarkup(row_width=1)
    for product in products:
        product_id, name, category, _, price = product
        markup.add(types.InlineKeyboardButton(f"{name} - ${price:.2f}", callback_data=f"admin_remove_{product_id}"))
    markup.add(types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_cancel_remove"))
    bot.send_message(call.message.chat.id, "üóëÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "admin_confirm_add_product")
def handle_confirm_add_product(call):
    try:
        user_id = call.from_user.id
        if 'admin_product_info' not in user_states or user_id not in user_states['admin_product_info']:
            bot.send_message(call.message.chat.id, "‚ùå –î–∞–Ω—ñ –ø—Ä–æ —Ç–æ–≤–∞—Ä –≤—ñ–¥—Å—É—Ç–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            bot.answer_callback_query(call.id)
            return
        product = user_states['admin_product_info'][user_id]
        add_product(product['name'], product['category'], product['description'], product['price'])
        bot.send_message(call.message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä '{product['name']}' –¥–æ–¥–∞–Ω–æ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É.")
        if 'admin_product_info' in user_states and user_id in user_states['admin_product_info']:
            del user_states['admin_product_info'][user_id]
        if user_id in user_states:
            del user_states[user_id]
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_confirm_add_product: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "admin_cancel_add_product")
def handle_cancel_add_product(call):
    user_id = call.from_user.id
    if 'admin_product_info' in user_states and user_id in user_states['admin_product_info']:
        del user_states['admin_product_info'][user_id]
    if user_id in user_states:
        del user_states[user_id]
    bot.send_message(call.message.chat.id, "‚ùå –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    bot.answer_callback_query(call.id)

@bot.message_handler(commands=['removeitem'])
def handle_remove_item_command(message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    products = get_products()
    if not products:
        bot.send_message(message.chat.id, "–ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    markup = types.InlineKeyboardMarkup(row_width=1)
    for product in products:
        product_id, name, category, _, price = product
        markup.add(types.InlineKeyboardButton(f"{name} - ${price:.2f}", callback_data=f"admin_remove_{product_id}"))
    markup.add(types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_cancel_remove"))
    bot.send_message(message.chat.id, "üóëÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_remove_') and call.data != 'admin_remove_product')
def handle_remove_product_selection(call):
    try:
        product_id = int(call.data.split('_')[2])
    except (IndexError, ValueError):
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–æ–≤–∞—Ä—É.")
        bot.answer_callback_query(call.id)
        return
    product = get_product_by_id(product_id)
    if not product:
        bot.send_message(call.message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        bot.answer_callback_query(call.id)
        return
    product_id, name, category, _, price = product
    text = (
        f"üóëÔ∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä?\n\n"
        f"*–ù–∞–∑–≤–∞:* {name}\n"
        f"*–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:* {category}\n"
        f"*–¶—ñ–Ω–∞:* ${price:.2f}"
    )
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"admin_confirm_remove_{product_id}"),
        types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_cancel_remove")
    )
    bot.send_message(call.message.chat.id, text, parse_mode='Markdown', reply_markup=markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_confirm_remove_'))
def handle_confirm_remove_product(call):
    product_id = int(call.data.split('_')[3])
    product = get_product_by_id(product_id)
    if not product:
        bot.send_message(call.message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        bot.answer_callback_query(call.id)
        return
    name = product[1]
    remove_product(product_id)
    bot.send_message(call.message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä '{name}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–∞—Ç–∞–ª–æ–≥—É.")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "admin_cancel_remove")
def handle_cancel_remove_product(call):
    bot.send_message(call.message.chat.id, "‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    bot.answer_callback_query(call.id)

@bot.message_handler(commands=['orders'])
def handle_orders_command(message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    orders = get_orders()
    if not orders:
        bot.send_message(message.chat.id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        return
    text = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å:*\n\n"
    for order in orders:
        order_id, uid, uname, products, total, status, date = order
        text += (
            f"*–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}*\n"
            f"üë§ {uname} (ID: {uid})\n"
            f"üõí {products}\n"
            f"üíµ –°—É–º–∞: ${total:.2f}\n"
            f"üì¶ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n\n"
            "-------------------------\n\n"
        )
    bot.send_message(message.chat.id, text, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data == "admin_view_orders")
def handle_admin_view_orders(call):
    try:
        user_id = call.from_user.id
        if user_id not in ADMIN_IDS:
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
            
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥–∏
        class FakeMessage:
            def __init__(self):
                self.chat = type('', (), {'id': call.message.chat.id})()
                self.from_user = type('', (), {'id': user_id})()
                self.text = '/orders'
                
        handle_orders_command(FakeMessage())
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_admin_view_orders: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å")

@bot.message_handler(commands=['stats'])
def handle_stats_command(message):
    user_id = message.from_user.id  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥ {user_id}")
    
    if user_id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    
    products = get_products()
    orders = get_orders()
    total_revenue = sum(order[4] for order in orders)  # total_price
    
    stats_text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω—É:*\n\n"
        f"üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {len(products)}\n"
        f"üìã –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å: {len(orders)}\n"
        f"üíµ –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥: ${total_revenue:.2f}"
    )
    bot.send_message(message.chat.id, stats_text, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data == "admin_stats")
def handle_admin_stats(call):
    try:
        user_id = call.from_user.id
        if user_id not in ADMIN_IDS:
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
            
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥–∏
        class FakeMessage:
            def __init__(self):
                self.chat = type('', (), {'id': call.message.chat.id})()
                self.from_user = type('', (), {'id': user_id})()
                self.text = '/stats'
                
        handle_stats_command(FakeMessage())
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_admin_stats: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

