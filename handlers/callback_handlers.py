
from telebot import types
from bot_init import bot, user_states
from database import get_products_by_category, get_products, get_product_by_id
from keyboards import (
    create_product_details_keyboard,
    create_categories_keyboard,
    create_payment_methods_keyboard,
    create_payment_simulation_keyboard,
    create_payment_retry_keyboard
)
from handlers.cart_handlers import show_cart
from utils.helpers import format_cart_text

@bot.callback_query_handler(func=lambda call: call.data.startswith('cat_'))
def handle_category_callback(call):
    chat_id = call.message.chat.id
    category_type = call.data.split('_')[1]
    
    category_map = {
        'writing': '–ü–∏—Å—å–º–æ–≤–µ –ø—Ä–∏–ª–∞–¥–¥—è',
        'paper': '–ü–∞–ø–µ—Ä–æ–≤—ñ –≤–∏—Ä–æ–±–∏',
        'office': '–û—Ñ—ñ—Å–Ω–µ –ø—Ä–∏–ª–∞–¥–¥—è',
        'school': '–®–∫—ñ–ª—å–Ω–µ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å—å–∫–µ –ø—Ä–∏–ª–∞–¥–¥—è',
        'all': 'All'
    }
    
    category = category_map.get(category_type, 'All')
    
    if category == "All":
        products = get_products()
        show_products_list(chat_id, products, "–í—Å—ñ —Ç–æ–≤–∞—Ä–∏")
    else:
        products = get_products_by_category(category)
        show_products_list(chat_id, products, category)
    
    bot.answer_callback_query(call.id)

def show_products_list(chat_id, products, category_name):
    if not products:
        bot.send_message(chat_id, f"üòï –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {category_name}")
        return
        
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for product in products:
        if category_name == "–í—Å—ñ —Ç–æ–≤–∞—Ä–∏":
            product_id, name, category, desc, price = product
            btn_text = f"{name} ({category}) - ${price:.2f}"
        else:
            product_id, name, desc, price = product
            btn_text = f"{name} - ${price:.2f}"
            
        markup.add(types.InlineKeyboardButton(
            btn_text, 
            callback_data=f"product_{product_id}"
        ))
    
    markup.add(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="back_to_categories"))
    
    bot.send_message(
        chat_id,
        f"üìã *{category_name}*\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=markup,
        parse_mode='Markdown'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('product_'))
def handle_product_callback(call):
    chat_id = call.message.chat.id
    product_id = int(call.data.split('_')[1])
    product = get_product_by_id(product_id)
    
    if not product:
        bot.send_message(chat_id, "üòï –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    product_id, name, category, description, price = product
    
    product_text = (
        f"*{name}*\n\n"
        f"*–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:* {category}\n"
        f"*–¶—ñ–Ω–∞:* ${price:.2f}\n\n"
        f"*–û–ø–∏—Å:* {description}"
    )
    
    markup = create_product_details_keyboard(product_id, category)
    
    bot.send_message(
        chat_id,
        product_text,
        reply_markup=markup,
        parse_mode='Markdown'
    )
    
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_categories")
def handle_back_to_categories(call):
    bot.send_message(
        call.message.chat.id,
        "üìö *–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:*",
        reply_markup=create_categories_keyboard(),
        parse_mode='Markdown'
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('back_to_'))
def handle_back_to_category(call):
    category = call.data.split('_')[2]
    category = category.replace('_', ' ')
    
    if category == "All":
        products = get_products()
        show_products_list(call.message.chat.id, products, "–í—Å—ñ —Ç–æ–≤–∞—Ä–∏")
    else:
        products = get_products_by_category(category)
        show_products_list(call.message.chat.id, products, category)
    
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "payment")
def handle_payment(call):
    chat_id = call.message.chat.id
    
    bot.send_message(
        chat_id,
        "üí∞ *–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:*",
        reply_markup=create_payment_methods_keyboard(),
        parse_mode='Markdown'
    )
    
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_'))
def handle_payment_method(call):
    payment_method = call.data.split('_')[1]
    
    if payment_method == 'card':
        bot.send_message(
            call.message.chat.id,
            "üí≥ *–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é*\n\n"
            "–£ —Ä–µ–∞–ª—å–Ω—ñ–π —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç—É—Ç –±—É–¥–µ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –ø–ª–∞—Ç—ñ–∂–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é.\n"
            "–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –º–∏ —ñ–º—ñ—Ç—É—î–º–æ –ø—Ä–æ—Ü–µ—Å –æ–ø–ª–∞—Ç–∏.",
            parse_mode='Markdown'
        )
        
        bot.send_message(call.message.chat.id, "–û–±—Ä–æ–±–∫–∞ –ø–ª–∞—Ç–µ–∂—É...")
        
        markup = create_payment_simulation_keyboard()
        
        bot.send_message(
            call.message.chat.id,
            "–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –æ–±–µ—Ä—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞—Ç–µ–∂—É:",
            reply_markup=markup
        )
    
    elif payment_method == 'cash':
        bot.send_message(
            call.message.chat.id,
            "üíµ *–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂*\n\n"
            "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞ –≤–∫–∞–∑–∞–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é, "
            "–æ–ø–ª–∞—Ç–∞ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ.",
            parse_mode='Markdown'
        )
    
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('payment_'))
def handle_payment_simulation(call):
    result = call.data.split('_')[1]
    
    if result == 'success':
        bot.send_message(
            call.message.chat.id,
            "‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!*\n\n"
            "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —Ç–∞ –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n"
            "–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            parse_mode='Markdown'
        )
    
    elif result == 'fail':
        bot.send_message(
            call.message.chat.id,
            "‚ùå *–ü–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏*\n\n"
            "–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –≤–∞—à–∏–º –ø–ª–∞—Ç–µ–∂–µ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏.",
            parse_mode='Markdown'
        )
        
        markup = create_payment_retry_keyboard()
        
        bot.send_message(
            call.message.chat.id,
            "–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?",
            reply_markup=markup
        )
    
    bot.answer_callback_query(call.id)